# Autogenerated from a Treetop grammar. Edits may be lost.


module HTTP
  include Treetop::Runtime

  def root
    @root ||= :request
  end

  module Request0
    def request_line
      elements[0]
    end

    def headers
      elements[1]
    end
  end

  def _nt_request
    start_index = index
    if node_cache[:request].has_key?(index)
      cached = node_cache[:request][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_request_line
    s0 << r1
    if r1
      r2 = _nt_headers
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Request0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:request][start_index] = r0

    r0
  end

  module RequestLine0
    def method
      elements[0]
    end

    def space1
      elements[1]
    end

    def request_uri
      elements[2]
    end

    def space2
      elements[3]
    end

    def http_version
      elements[4]
    end
  end

  module RequestLine1
    def request_line(a,b,c,d,e)
      {:method => a, :uri => c, :http_version => e}
    end
  end

  def _nt_request_line
    start_index = index
    if node_cache[:request_line].has_key?(index)
      cached = node_cache[:request_line][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_method
    s0 << r1
    if r1
      r2 = _nt_space
      s0 << r2
      if r2
        r3 = _nt_request_uri
        s0 << r3
        if r3
          r4 = _nt_space
          s0 << r4
          if r4
            r5 = _nt_http_version
            s0 << r5
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(RequestLine0)
      r0.extend(RequestLine1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:request_line][start_index] = r0

    r0
  end

  def _nt_method
    start_index = index
    if node_cache[:method].has_key?(index)
      cached = node_cache[:method][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if has_terminal?("OPTIONS", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 7))
      @index += 7
    else
      terminal_parse_failure("OPTIONS")
      r1 = nil
    end
    if r1
      r0 = r1
    else
      if has_terminal?("GET", false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 3))
        @index += 3
      else
        terminal_parse_failure("GET")
        r2 = nil
      end
      if r2
        r0 = r2
      else
        if has_terminal?("HEAD", false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 4))
          @index += 4
        else
          terminal_parse_failure("HEAD")
          r3 = nil
        end
        if r3
          r0 = r3
        else
          if has_terminal?("POST", false, index)
            r4 = instantiate_node(SyntaxNode,input, index...(index + 4))
            @index += 4
          else
            terminal_parse_failure("POST")
            r4 = nil
          end
          if r4
            r0 = r4
          else
            if has_terminal?("PUT", false, index)
              r5 = instantiate_node(SyntaxNode,input, index...(index + 3))
              @index += 3
            else
              terminal_parse_failure("PUT")
              r5 = nil
            end
            if r5
              r0 = r5
            else
              if has_terminal?("DELETE", false, index)
                r6 = instantiate_node(SyntaxNode,input, index...(index + 6))
                @index += 6
              else
                terminal_parse_failure("DELETE")
                r6 = nil
              end
              if r6
                r0 = r6
              else
                if has_terminal?("TRACE", false, index)
                  r7 = instantiate_node(SyntaxNode,input, index...(index + 5))
                  @index += 5
                else
                  terminal_parse_failure("TRACE")
                  r7 = nil
                end
                if r7
                  r0 = r7
                else
                  if has_terminal?("CONNECT", false, index)
                    r8 = instantiate_node(SyntaxNode,input, index...(index + 7))
                    @index += 7
                  else
                    terminal_parse_failure("CONNECT")
                    r8 = nil
                  end
                  if r8
                    r0 = r8
                  else
                    @index = i0
                    r0 = nil
                  end
                end
              end
            end
          end
        end
      end
    end

    node_cache[:method][start_index] = r0

    r0
  end

  module RequestUri0
    def protocol
      elements[0]
    end

    def host
      elements[1]
    end

    def path
      elements[2]
    end
  end

  def _nt_request_uri
    start_index = index
    if node_cache[:request_uri].has_key?(index)
      cached = node_cache[:request_uri][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_protocol
    s0 << r1
    if r1
      r2 = _nt_host
      s0 << r2
      if r2
        r3 = _nt_path
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(RequestUri0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:request_uri][start_index] = r0

    r0
  end

  def _nt_protocol
    start_index = index
    if node_cache[:protocol].has_key?(index)
      cached = node_cache[:protocol][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?("http://", false, index)
        r1 = instantiate_node(SyntaxNode,input, index...(index + 7))
        @index += 7
      else
        terminal_parse_failure("http://")
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    r0 = instantiate_node(SyntaxNode,input, i0...index, s0)

    node_cache[:protocol][start_index] = r0

    r0
  end

  def _nt_host
    start_index = index
    if node_cache[:host].has_key?(index)
      cached = node_cache[:host][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if has_terminal?("*", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure("*")
      r1 = nil
    end
    if r1
      r0 = r1
    else
      s2, i2 = [], index
      loop do
        if has_terminal?('\G[^\\/]', true, index)
          r3 = true
          @index += 1
        else
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      if r2
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:host][start_index] = r0

    r0
  end

  def _nt_path
    start_index = index
    if node_cache[:path].has_key?(index)
      cached = node_cache[:path][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?('\G[\\S]', true, index)
        r1 = true
        @index += 1
      else
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    r0 = instantiate_node(SyntaxNode,input, i0...index, s0)

    node_cache[:path][start_index] = r0

    r0
  end

  def _nt_http_version
    start_index = index
    if node_cache[:http_version].has_key?(index)
      cached = node_cache[:http_version][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?("HTTP/1.1", false, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 8))
      @index += 8
    else
      terminal_parse_failure("HTTP/1.1")
      r0 = nil
    end

    node_cache[:http_version][start_index] = r0

    r0
  end

  def _nt_headers
    start_index = index
    if node_cache[:headers].has_key?(index)
      cached = node_cache[:headers][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      r1 = _nt_header
      if r1
        s0 << r1
      else
        break
      end
    end
    r0 = instantiate_node(SyntaxNode,input, i0...index, s0)

    node_cache[:headers][start_index] = r0

    r0
  end

  module Header0
    def header_name
      elements[0]
    end

    def header_value
      elements[2]
    end
  end

  def _nt_header
    start_index = index
    if node_cache[:header].has_key?(index)
      cached = node_cache[:header][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_header_name
    s0 << r1
    if r1
      if has_terminal?('\G[:\\s:]', true, index)
        r2 = true
        @index += 1
      else
        r2 = nil
      end
      s0 << r2
      if r2
        r3 = _nt_header_value
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Header0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:header][start_index] = r0

    r0
  end

  def _nt_header_name
    start_index = index
    if node_cache[:header_name].has_key?(index)
      cached = node_cache[:header_name][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?('\G[a-zA-Z\\-]', true, index)
        r1 = true
        @index += 1
      else
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    end

    node_cache[:header_name][start_index] = r0

    r0
  end

  def _nt_header_value
    start_index = index
    if node_cache[:header_value].has_key?(index)
      cached = node_cache[:header_value][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?('\G[.]', true, index)
        r1 = true
        @index += 1
      else
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    end

    node_cache[:header_value][start_index] = r0

    r0
  end

  def _nt_space
    start_index = index
    if node_cache[:space].has_key?(index)
      cached = node_cache[:space][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?(" ", false, index)
        r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure(" ")
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    end

    node_cache[:space][start_index] = r0

    r0
  end

end

class HTTPParser < Treetop::Runtime::CompiledParser
  include HTTP
end

